(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("swagger-client"));
	else if(typeof define === 'function' && define.amd)
		define(["swagger-client"], factory);
	else if(typeof exports === 'object')
		exports["CallfireClient"] = factory(require("swagger-client"));
	else
		root["CallfireClient"] = factory(root["swagger-client"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Swagger = __webpack_require__(1);
	
	/**
	 * Construct API client for CallFire API v2
	 *
	 * @param {string} login - API login
	 * @param {string} password - API password
	 * @param {Object} options - client options. debug: true - enables additional logging
	 *
	 * @returns {CallfireClient}
	 *
	 * <b>Authentication:</b> the CallFire API V2 uses HTTP Basic Authentication to verify
	 * the user of an endpoint. A generated username/password API credential from your
	 * account settings is required.
	 * </p>
	 * <b>Errors:</b> codes in the 400s range detail all of the errors a CallFire Developer could
	 * encounter while using the API. Bad Request, Rate Limit Reached, and Unauthorized
	 * are some of the sorts of responses in the 400s block. Codes in the 500s range are
	 * error responses from the CallFire system. If an error has occurred anywhere in
	 * the execution of a resource that was not due to user input, a 500 response
	 * will be returned with a corresponding JSON error body. In that body will contain a message
	 * detailing what went wrong.
	 * API may return following response codes:
	 * <ul>
	 * <li>400 - Bad request, the request was formatted improperly.</li>
	 * <li>401 - Unauthorized, API Key missing or invalid.</li>
	 * <li>403 - Forbidden, insufficient permissions.</li>
	 * <li>404 - NOT FOUND, the resource requested does not exist.</li>
	 * <li>500 - Internal Server Error.</li>
	 * </ul>
	 *
	 * @author Vladimir Mikhailov (email: vmikhailov@callfire.com)
	 * @see <a href="https://developers.callfire.com/docs.html">Callfire API documentation</a>
	 * @see <a href="https://developers.callfire.com/learn.html">HowTos and examples</a>
	 * @see <a href="http://stackoverflow.com/questions/tagged/callfire">Stackoverflow community questions</a>
	 * @since 0.0.1
	 */
	
	var CallfireClient = function () {
	  function CallfireClient(login, password, options) {
	    _classCallCheck(this, CallfireClient);
	
	    Object.assign(this, options || {});
	    CallfireClient.validateCredentials(login, password);
	
	    this.swaggerClient = new Swagger({
	      url: CallfireClient.swaggerUrl(),
	      authorizations: {
	        basicAuth: new Swagger.PasswordAuthorization(login, password)
	      },
	      usePromise: true
	    });
	  }
	
	  /**
	   * Method instantiates API client and connects to swagger-enabled API
	   *
	   * @return {Swagger}
	   */
	
	
	  _createClass(CallfireClient, [{
	    key: 'ready',
	    value: function ready(resolve, reject) {
	      var _this = this;
	
	      this.swaggerClient.then(function (client) {
	        Object.assign(_this, client.apis || {});
	        resolve(client);
	      }).catch(function (error) {
	        reject(error);
	      });
	    }
	
	    /**
	     * Validates API credentials
	     *
	     * @param login API login
	     * @param password API password
	     */
	
	  }], [{
	    key: 'validateCredentials',
	    value: function validateCredentials(login, password) {
	      if (login == 'undefined' || login == null || password == 'undefined' || password == null) {
	        throw new Error('API credentials cannot be empty.');
	      }
	    }
	
	    /**
	     * Returns base API path
	     *
	     * @return {string}
	     */
	
	  }, {
	    key: 'basePath',
	    value: function basePath() {
	      return 'https://api.callfire.com/v2/';
	    }
	
	    /**
	     * Returns path to Swagger spec
	     *
	     * @return {string}
	     */
	
	  }, {
	    key: 'swaggerUrl',
	    value: function swaggerUrl() {
	      return CallfireClient.basePath() + 'api-docs/swagger.json';
	    }
	  }]);
	
	  return CallfireClient;
	}();
	
	exports = module.exports = CallfireClient;

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }
/******/ ])
});
;
//# sourceMappingURL=callfire-api-client-js.js.map